% Определение цветов платья и туфель для каждой из подруг
solve(Pairings) :-
    % Варианты цветов платья и туфель
    Colors = [white, green, blue],

    % Генерация возможных пар цветов для платья и туфель
    generate_pairs(Colors, Pairings),

    % Условия задачи
    % 1. У Ани цвет платья и туфель совпадают
    member([anya, C, C], Pairings),
    
    % 2. У Вали ни платье, ни туфли не белые
    not_member([valya, white, _], Pairings),
    not_member([valya, _, white], Pairings),

    % 3. Наташа в зеленых туфлях
    member([natasha, green, _], Pairings),

    % Проверка, что все цвета разные
    all_different_colors(Pairings).

% Правило для проверки, что все элементы в списке различны
all_different([]).
all_different([_]).
all_different([H | T]) :- not_member(H, T), all_different(T).

% Правило для генерации всех возможных пар цветов
generate_pairs([], []).
generate_pairs([X | Colors], [[_, X, Y] | Rest]) :-
    member(Y, Colors),
    generate_pairs(Colors, Rest).

% Правило для проверки, что элемент не является членом списка
not_member(_, []).
not_member(X, [[X | _] | _]) :- !, fail.
not_member(X, [_ | T]) :- not_member(X, T).

% Правило для проверки, что все элементы в списке различны
all_different_colors(Pairings) :-
    maplist(get_color, Pairings, Colors),
    all_different(Colors).

% Правило для извлечения цвета из пары
get_color([_, Color, _], Color).

% Вывод решения
main :-
    solve(Pairings),
    write(Pairings), nl,
    halt.

:- main.